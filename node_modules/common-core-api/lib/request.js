'use strict';
(function(){
    'use strict';
    //const User=require('./user.js')
    const url=require('url')
    const URL = require('./url.js')
    const err = require('./error.js')
    const val = require('./val.js')
    const rp = require('request-promise')
    const co = require('co')
    const assert = require('assert')
    const model=require('ekit.model')



    function ensureData(value){
        let type = typeof value;
        if(val.obj(value)) return value;
        var obj = {};
        if(Array.isArray(value)){ return value; }
        switch(type){
            case 'string':
                if(val.isJSON(value)) obj=JSON.parse(value);
                break;
            default:obj.data=value;break;
        }
        return obj;
    }
    class Data extends Map{
        constructor( value ){
            super()
            let type = typeof value;
            this.set('originalType',type)

            Object.assign(this,ensureData(value));

        }
    }



    function coget(args,asData){
       return  co(function* (){
           let r = yield rp(args);
           if(asData){
               return new Data(r);
           }
           return r;
        });
    }
    class Req extends Map{
        constructor( user , dataOptions ){
            super([['user',user],['qs',user.qs]]);
            if(val.obj(dataOptions)) this.set('dataOptions',dataOptions)
            else this.set('dataOptions',{ onlyData:true , promises:false })
        }
        get promises(){ return this.get('dataOptions').promises || false;  }
        send(args){
            if(this.promises){ console.log('will promise'); return rp(args); }
            return co(function* (p){
                let y = yield p;
                return y;
            },coget(args,this.get('dataOptions').onlyData));
        }
        jurisdictions( ops ){
            var id='';
            if(typeof ops === "string") id += '/'+id;

            let args = {uri:url.format(URL)+'/jurisdictions'+id,qs:this.get('qs'),json:true}

            return co(function* (resp){
                let data = yield resp;
                if(Array.isArray(data.data)){
                    data.data.forEach(function(v){
                        if(!v || typeof v.type !== "string"){}
                        else{
                            let m = model.make(v)
                            if(m.error){ console.error(m); }
                            else if(m && m.type) {
                                let SET = model.jurs;
                                if(SET){
                                    if(!SET.has(m.type)){SET.set(m.type,new Set())}
                                    if(SET.has(m.type) && !SET.get(m.type).has(m.id)){
                                        SET.get(m.type).add(m)
                                    }
                                }
                            }
                        }
                    });
                }
                return model.jurs;
            },this.send(args));
        }
        standard_sets(id){
            let args = {uri:url.format(URL)+'/standard_sets/'+id,qs:this.get('qs'),json:true}
            return this.send(args);
        }
        search(query){ return this.get('user').search.index.search(query); }


        // Quickies
        ss(id){ return this.standard_sets(id); }
        s( query ){ return this.search( query ); }
        jurs( ops ){ return this.jurisdictions( ops ); }
        j( id ){ return this.jurisdictions( id ); }
        __states( search , except ){
            if(model.jurs.has('states')){
                return new Promise(function(v){return v(model.jurs.get('states'))});
            }
            return this.jurisdictions(false).filter((jur)=>{
                if(jur.type === "state"){
                    var keep = true;
                    if(Array.isArray(search)){
                        search.forEach((s)=>{
                            if(jur.title.indexOf(s) === 0){ keep = true; }
                        })
                    }
                    if(Array.isArray(except)){
                        if(except.indexOf(jur.title) >= 0) keep=false;
                    }
                    return keep;
                }
                return false;
            });
        }
        states( search , except ){
            console.log('will search states',search)
            const $this=this;
            return co(function *(){
                let r = yield $this.jurisdictions(false);

                return Array.from(r.get('state'));
            })
        }

        state( title ){
            if(typeof title !== "string") title = "Florida"
                const $this=this;
               return co(function* () {
                   let r = yield $this.states([title]);
                   let flt = r.filter((a)=>{
                       if(a.title === title){
                           return true;
                       }else if(a.id === title){
                           return true;
                       }
                       return false;
                   })
                   if(flt.length){
                       return flt[0];
                   }
                   return new Error('state not found')
               });
            //let j = this.states().filter((state)=>{
            //    if(state.title.toLowerCase() === title.toLowerCase()) return true;
            //    return false;
            //});
            //if(j.length) return j[0];

        }
    }




    module.exports = Req;
})();